/*
V1:
Borders:

const std::string m_leftBorder = "<!"
const std::string m_rightBorder = "!>"
const std::string m_emptySpace = " ."
const std::string m_block = "[]"
const std::string m_bottomL1 = "**"

<! . . . . . . . . . .!>
<! . . . . . . . . . .!>
<! . . . . . . . . . .!>
<! . . . .[] . . . . .!>
<! . . . .[] . . . . .!>
<! . . . .[] . . . . .!>
<! . . . .[] . . . . .!>
<! . . . . . . . . . .!>
<! . . . . . . . . . .!>
<! . . . . . . . . . .!>
<! . . . . . . . . . .!>
<! . . . . . . . . . .!>
<! . . . . . . . . . .!>
<! . . . . . . . . . .!>
<! . . . . . . . . . .!>
<! . . . . . . . . .[]!>
<! . . . . . . . .[][]!>
<! . .[] . . . . .[][]!>
<! . .[][] . . . .[][]!>
<![][][][] . .[][][][]!>
<!********************!>


*/


/*

(char)(248): � static_cast<char>(248): �
(char)(249): ? static_cast<char>(249): ?
(char)(250): � static_cast<char>(250): �
(char)(253): � static_cast<char>(253): �
(char)(254): ? static_cast<char>(254): ?

*/



"║ . · . ∙ . ° . . . .║\n"
"║ . · . ∙ . ° . . . .║\n"
"║ . · . ∙ . ° . . . .║\n"
"║ . · . ∙ . ° . . . .║\n"
"║ . . . . . . . . . .║\n"
"║ . . . . . . . . . .║\n"
"║ . . . .▐▌ . . . . .║\n"
"║ . . . .▐▌ . . . . .║\n"
"║ . . . .▐▌ . . . . .║\n"
"║ . . . .▐▌▐▌▐▌ . . .║\n"
"║ . . . . . . . . . .║\n"
"║ . . .[] . . . . . .║\n"
"║ . . .[] . . . . . .║\n"
"║ . . .[] . . . . . .║\n"
"║ . . .[][] . . . . .║\n"
"║ . . . . . . . . . .║\n"
"║ . ▄ . ▀ . ■ .██ . .║\n"
"║ . ▄ . ▀ . ■ .██ . .║\n"
"║ . ▄ . ▀ . ■ .██ . .║\n"
"║ . ▄ . ▀ . ■ .████ .║\n"
"╚════════════════════╝\n"




	/*
	std::string field = "║ . · . ∙ . ° . . . .║\n"
		"║ . · . ∙ . ° . . . .║\n"
		"║ . · . ∙ . ° . . . .║\n"
		"║ . · . ∙ . ° . . . .║\n"
		"║ . . . . . . . . . .║\n"
		"║ . . . . . . . . . .║\n"
		"║ . . . .▐▌ . . . . .║\n"
		"║ . . . .▐▌ . . . . .║\n"
		"║ . . . .▐▌ . . . . .║\n"
		"║ . . . .▐▌▐▌▐▌ . . .║\n"
		"║ . . . . . . . . . .║\n"
		"║ . . .[] . . . . . .║\n"
		"║ . . .[] . . . . . .║\n"
		"║ . . .[] . . . . . .║\n"
		"║ . . .[][] . . . . .║\n"
		"║ . . . . . . . . . .║\n"
		"║ . ▄ . ▀ . ■ .██ . .║\n"
		"║ . ▄ . ▀ . ■ .██ . .║\n"
		"║ . ▄ . ▀ . ■ .██ . .║\n"
		"║ . ▄ . ▀ . ■ .████ .║\n"
		"╚════════════════════╝\n";

	std::cout << field << std::endl;
	

	*/


0 =  · 					- Empty space
1 = ║ (char)(186)		- Wall
2 = ══					- Bottom
3 = ╚					- Left corner
4 = ╝					- Right corner
5 = ██					- Block
6 = "\n"				- Next line
7 = ██					- Fixed block
8 = 					- temp block (never should be printed)


	int m_playFieldBool[FieldSize::HEIGHT][FieldSize::WIDTH] = {
		{1,0,0,0,5,5,0,0,0,0,0,1,6},
		{1,0,0,0,5,0,0,0,0,0,0,1,6},
		{1,0,0,0,5,0,0,0,0,0,0,1,6},
		{1,0,0,0,0,0,0,0,0,0,0,1,6},
		{1,0,0,0,0,0,0,0,0,0,0,1,6},
		{1,0,0,0,0,0,0,0,0,0,0,1,6},
		{1,0,0,0,0,0,0,0,0,0,0,1,6},
		{1,0,0,0,0,0,0,0,0,0,0,1,6},
		{1,0,0,0,0,0,0,0,0,0,0,1,6},
		{1,0,0,0,0,0,0,0,0,0,0,1,6},
		{1,0,0,0,0,0,0,0,0,0,0,1,6},
		{1,0,0,0,0,0,0,0,0,0,0,1,6},
		{1,0,0,0,0,0,0,0,0,0,0,1,6},
		{1,0,0,0,0,0,0,0,0,0,0,1,6},
		{1,0,0,0,0,0,0,0,0,0,0,1,6},
		{1,0,0,0,0,0,0,0,0,0,0,1,6},
		{1,0,0,0,0,0,0,0,0,0,0,1,6},
		{1,0,0,0,0,0,0,0,0,0,0,1,6},
		{1,0,7,0,0,0,0,0,0,0,7,1,6},
		{1,7,7,7,0,7,7,0,0,7,7,1,6},
		{3,2,2,2,2,2,2,2,2,2,2,4,6}
	};




    bool coordsO [4][8] = { 
        {1,1,1,1,0,0,0,0},
        {1,1,1,1,0,0,0,0},
        {0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0}
    };
    
    
    
    
    
    
    bool coordsL0 [4][8] = {
        {0,0,0,0,1,1,0,0},
        {1,1,1,1,1,1,0,0},
        {0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0}
    };
    
    bool coordsL90 [4][8] = { 
        {1,1,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,0},
        {1,1,1,1,0,0,0,0},
        {0,0,0,0,0,0,0,0}
    };
    
    bool coordsL180 [4][8] = { 
        {1,1,1,1,1,1,0,0},
        {1,1,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0}
    };
    
    bool coordsL270 [4][8] = { 
        {1,1,1,1,0,0,0,0},
        {0,0,1,1,0,0,0,0},
        {0,0,1,1,0,0,0,0},
        {0,0,0,0,0,0,0,0}
    };
    
    
    
    
    
    int playFieldBool[21][22] = {
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
        {3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,4}
    };


    Draw
CheckCollision
RotateTetromino
MoveTetromino
CheckLines




while (!m_gameOver) {
    for (int x = 0; x <= m_fieldWidth + 1; ++x)
    {
        m_fieldDisplay += (char)(219);
        m_fieldDisplay += (char)(219);
    }
    m_fieldDisplay += "\n";
    for (int y = 1; y <= m_fieldHight + 1; ++y)
    {
        for (int x = 0; x <= m_fieldWidth + 1; ++x)
        {
            if (x == 0) {
                m_fieldDisplay += (char)(219);
                m_fieldDisplay += (char)(219);
            }
            else if (x == m_fieldWidth + 1) {
                m_fieldDisplay += (char)(219);
                m_fieldDisplay += (char)(219);
                m_fieldDisplay += "\n";
            }
            else {
                if (m_snake->GetHeadX() == x && m_snake->GetHeadY() == y)
                {
                    m_fieldDisplay += (char)(219);
                    m_fieldDisplay += (char)(219);
                }
                else  if (m_food->GetCoordX() == x && m_food->GetCoordY() == y)
                {
                    m_fieldDisplay += "[]";
                }
                else
                {
                    bool print = true;
                    auto tail = m_snake->GetTail();
                    for (size_t k = 1; k < tail->size(); ++k)
                    {
                        if ((*tail)[k].first == x && (*tail)[k].second == y)
                        {
                            m_fieldDisplay += (char)(219);
                            m_fieldDisplay += (char)(219);
                            print = false;
                            break;
                        }
                    }
                    if (print)
                    {
                        m_fieldDisplay += "  ";
                    }
                }
            }
        }
    }
    for (int x = 0; x <= m_fieldWidth + 1; ++x)
    {
        m_fieldDisplay += (char)(219);
        m_fieldDisplay += (char)(219);
    }


    (char)(176): ░ static_cast<char>(176): ░
(char)(177): ▒ static_cast<char>(177): ▒
(char)(178): ▓ static_cast<char>(178): ▓
(char)(179): │ static_cast<char>(179): │
(char)(180): ┤ static_cast<char>(180): ┤
(char)(181): ╡ static_cast<char>(181): ╡
(char)(182): ╢ static_cast<char>(182): ╢
(char)(183): ╖ static_cast<char>(183): ╖
(char)(184): ╕ static_cast<char>(184): ╕
(char)(185): ╣ static_cast<char>(185): ╣
(char)(186): ║ static_cast<char>(186): ║
(char)(187): ╗ static_cast<char>(187): ╗
(char)(188): ╝ static_cast<char>(188): ╝
(char)(189): ╜ static_cast<char>(189): ╜
(char)(190): ╛ static_cast<char>(190): ╛
(char)(191): ┐ static_cast<char>(191): ┐
(char)(192): └ static_cast<char>(192): └
(char)(193): ┴ static_cast<char>(193): ┴
(char)(194): ┬ static_cast<char>(194): ┬
(char)(195): ├ static_cast<char>(195): ├
(char)(196): ─ static_cast<char>(196): ─
(char)(197): ┼ static_cast<char>(197): ┼
(char)(198): ╞ static_cast<char>(198): ╞
(char)(199): ╟ static_cast<char>(199): ╟
(char)(200): ╚ static_cast<char>(200): ╚
(char)(201): ╔ static_cast<char>(201): ╔
(char)(202): ╩ static_cast<char>(202): ╩
(char)(203): ╦ static_cast<char>(203): ╦
(char)(204): ╠ static_cast<char>(204): ╠
(char)(205): ═ static_cast<char>(205): ═
(char)(206): ╬ static_cast<char>(206): ╬
(char)(207): ╧ static_cast<char>(207): ╧
(char)(208): ╨ static_cast<char>(208): ╨
(char)(209): ╤ static_cast<char>(209): ╤
(char)(210): ╥ static_cast<char>(210): ╥
(char)(211): ╙ static_cast<char>(211): ╙
(char)(212): ╘ static_cast<char>(212): ╘
(char)(213): ╒ static_cast<char>(213): ╒
(char)(214): ╓ static_cast<char>(214): ╓
(char)(215): ╫ static_cast<char>(215): ╫
(char)(216): ╪ static_cast<char>(216): ╪
(char)(217): ┘ static_cast<char>(217): ┘
(char)(218): ┌ static_cast<char>(218): ┌
(char)(219): █ static_cast<char>(219): █
(char)(220): ▄ static_cast<char>(220): ▄
(char)(221): ▌ static_cast<char>(221): ▌
(char)(222): ▐ static_cast<char>(222): ▐
(char)(223): ▀ static_cast<char>(223): ▀
(char)(248): ° static_cast<char>(248): °
(char)(249): ∙ static_cast<char>(249): ∙
(char)(250): · static_cast<char>(250): ·
(char)(253): ¤ static_cast<char>(253): ¤
(char)(254): ■ static_cast<char>(254): ■

"║ . · . ∙ . ° . . . .║\n"
"║ . · . ∙ . ° . . . .║\n"
"║ . · . ∙ . ° . . . .║\n"
"║ . · . ∙ . ° . . . .║\n"
"║ . . . . . . . . . .║\n"
"║ . . . . . . . . . .║\n"
"║ . . . .▐▌ . . . . .║\n"
"║ . . . .▐▌ . . . . .║\n"
"║ . . . .▐▌ . . . . .║\n"
"║ . . . .▐▌▐▌▐▌ . . .║\n"
"║ . . . . . . . . . .║\n"
"║ . . .[] . . . . . .║\n"
"║ . . .[] . . . . . .║\n"
"║ . . .[] . . . . . .║\n"
"║ . . .[][] . . . . .║\n"
"║ . . . . . . . . . .║\n"
"║ . ▄ . ▀ . ■ .██ . .║\n"
"║ . ▄ . ▀ . ■ .██ . .║\n"
"║ . ▄ . ▀ . ■ .██ . .║\n"
"║ . ▄ . ▀ . ■ .████ .║\n"
"╚════════════════════╝\n";